一. 模块机制
  new  ->   module-info.java
  名称可以随便起
1. 系统模块:
  来自JDK和JRE的模块(官方提供的模块，比如我们上面用的)，我们也可以直接使用`java --list-modules`命令来列出所有的模块，不同的模块会导出不同的包供我们使用。
2. 应用程序模块:
  我们自己写的Java模块项目。
3. 自动模块:
  可能有些库并不是Java 9以上的模块项目，这种时候就需要做兼容了，默认情况下是直接导出所有的包，
  可以访问所有其他模块提供的类，不然之前版本的库就用不了了。
4. 未命名模块:
  我们自己创建的一个Java项目，如果没有创建 `module-info.java`，那么会按照未命名模块进行处理，
  未命名模块同样可以访问所有其他模块提供的类，这样我们之前写的Java 8代码才能正常地在Java 9以及之后的版本下运行。
  不过，由于没有使用Java 9的模块新特性，未命名模块只能默认暴露给其他未命名的模块和自动模块，
  应用程序模块无法访问这些类(实际上就是传统Java 8以下的编程模式，因为没有模块只需要导包就行)



二. interface中的private方法
  private方法必须有实现体 并且无法被外部类调用



三. Http/2客户端
java11


四. 集合类的of工厂方法
  of()方法生成的集合都是不可修改的(类似Arrays.asList()方法生成的list)
  List.of("A", "B");
  Set.of("A", "B");
  Map.of("A", 1, "B", 2);



五. 改进的Stream API
  Stream.ofNullable().iterator().limit().forEach();



二. JShell支持(REPL Read-Eval-Print Loop)
jshell (类似Python的感觉)


六. others
6.1 Java9的增强钻石操作符(匿名内部类)
  钻石操作符是在 java 7 中引入的，可以让代码更易读，但它不能用于匿名的内部类。
  在 java 9 中， 它可以与匿名的内部类一起使用，从而提高代码的可读性。


